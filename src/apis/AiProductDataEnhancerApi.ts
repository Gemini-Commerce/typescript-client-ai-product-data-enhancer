/* tslint:disable */
/* eslint-disable */
/**
 * aiproductdataenhancer/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiproductdataenhancerFillProductDataCheckRequest,
  AiproductdataenhancerFillProductDataCheckResponse,
  AiproductdataenhancerFillProductDataRequest,
  AiproductdataenhancerFillProductDataResponse,
  AiproductdataenhancerTranslateDataRequest,
  AiproductdataenhancerTranslateDataResponse,
  RpcStatus,
} from '../models/index';
import {
    AiproductdataenhancerFillProductDataCheckRequestFromJSON,
    AiproductdataenhancerFillProductDataCheckRequestToJSON,
    AiproductdataenhancerFillProductDataCheckResponseFromJSON,
    AiproductdataenhancerFillProductDataCheckResponseToJSON,
    AiproductdataenhancerFillProductDataRequestFromJSON,
    AiproductdataenhancerFillProductDataRequestToJSON,
    AiproductdataenhancerFillProductDataResponseFromJSON,
    AiproductdataenhancerFillProductDataResponseToJSON,
    AiproductdataenhancerTranslateDataRequestFromJSON,
    AiproductdataenhancerTranslateDataRequestToJSON,
    AiproductdataenhancerTranslateDataResponseFromJSON,
    AiproductdataenhancerTranslateDataResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface AiProductDataEnhancerFillProductDataRequest {
    body: AiproductdataenhancerFillProductDataRequest;
}

export interface AiProductDataEnhancerFillProductDataCheckRequest {
    body: AiproductdataenhancerFillProductDataCheckRequest;
}

export interface AiProductDataEnhancerTranslateDataRequest {
    body: AiproductdataenhancerTranslateDataRequest;
}

/**
 * 
 */
export class AiProductDataEnhancerApi extends runtime.BaseAPI {

    /**
     */
    async aiProductDataEnhancerFillProductDataRaw(requestParameters: AiProductDataEnhancerFillProductDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiproductdataenhancerFillProductDataResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aiProductDataEnhancerFillProductData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aiproductdataenhancer.AiProductDataEnhancer/FillProductData`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiproductdataenhancerFillProductDataRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiproductdataenhancerFillProductDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async aiProductDataEnhancerFillProductData(requestParameters: AiProductDataEnhancerFillProductDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiproductdataenhancerFillProductDataResponse> {
        const response = await this.aiProductDataEnhancerFillProductDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aiProductDataEnhancerFillProductDataCheckRaw(requestParameters: AiProductDataEnhancerFillProductDataCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiproductdataenhancerFillProductDataCheckResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aiProductDataEnhancerFillProductDataCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aiproductdataenhancer.AiProductDataEnhancer/FillProductDataCheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiproductdataenhancerFillProductDataCheckRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiproductdataenhancerFillProductDataCheckResponseFromJSON(jsonValue));
    }

    /**
     */
    async aiProductDataEnhancerFillProductDataCheck(requestParameters: AiProductDataEnhancerFillProductDataCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiproductdataenhancerFillProductDataCheckResponse> {
        const response = await this.aiProductDataEnhancerFillProductDataCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aiProductDataEnhancerTranslateDataRaw(requestParameters: AiProductDataEnhancerTranslateDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiproductdataenhancerTranslateDataResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling aiProductDataEnhancerTranslateData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aiproductdataenhancer.AiProductDataEnhancer/TranslateData`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AiproductdataenhancerTranslateDataRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiproductdataenhancerTranslateDataResponseFromJSON(jsonValue));
    }

    /**
     */
    async aiProductDataEnhancerTranslateData(requestParameters: AiProductDataEnhancerTranslateDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiproductdataenhancerTranslateDataResponse> {
        const response = await this.aiProductDataEnhancerTranslateDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
